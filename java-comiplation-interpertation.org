* Java: Compilation to Bytecode and Interpretation

** Understanding the Process
   Java employs a two-step process for executing code: compilation and interpretation (often with Just-In-Time compilation).

*** Compilation
    - Java source code (.java files) is compiled by the `javac` compiler.
    - The compiler translates the Java code into an intermediate format called *bytecode*.
    - Bytecode is platform-independent, meaning it's the same across different operating systems and hardware.
    - Bytecode instructions are stored in `.class` files.

*** Interpretation (and Just-In-Time Compilation)
    - The `.class` files containing bytecode are executed by the *Java Virtual Machine (JVM)*.
    - The JVM is platform-specific and acts as an intermediary between the bytecode and the underlying system.

    **** Interpretation
         - Initially, the JVM interprets the bytecode instruction by instruction.
         - Each bytecode instruction is read, translated into the machine code of the specific computer, and then executed.

    **** Just-In-Time (JIT) Compilation
         - Modern JVMs also use Just-In-Time (JIT) compilation for performance optimization.
         - The JVM analyzes the running bytecode and identifies frequently executed sections ("hot spots").
         - These "hot spots" are compiled into native machine code by the JIT compiler.
         - The compiled machine code is cached and reused, leading to faster execution for frequently used code.

** "Write Once, Run Anywhere"
   This two-stage process (compile-once to bytecode, then interpret/JIT-compile on the target platform) is the key to Java's "write once, run anywhere" (WORA) capability. The same `.class` files can run on any operating system that has a compatible JVM.

** Analogy
   Think of it like this:
   - The Java source code is like a document written in English.
   - The `javac` compiler acts like a translator, converting the English document into a universal intermediate language (bytecode).
   - The JVM is like a person who can read and execute instructions in this intermediate language.
   - The JIT compiler is like this person learning to recognize frequently used phrases and memorizing how to execute them faster.